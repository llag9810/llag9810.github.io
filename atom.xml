<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小窝</title>
  <subtitle>Android/Java/随便写写</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://llag9810.github.io/"/>
  <updated>2018-02-07T14:17:55.000Z</updated>
  <id>http://llag9810.github.io/</id>
  
  <author>
    <name>yifan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 垃圾回收（下篇）及典型的垃圾回收算法</title>
    <link href="http://llag9810.github.io/2018/02/07/Java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89%E5%8F%8A%E5%85%B8%E5%9E%8B%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://llag9810.github.io/2018/02/07/Java-垃圾回收（下篇）及典型的垃圾回收算法/</id>
    <published>2018-02-07T13:27:34.000Z</published>
    <updated>2018-02-07T14:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>在上篇中，我们提到了什么是 GC、GC 的原理、何时该 GC 等问题，但是具体的垃圾回收算法没有提到。在本篇博客中，我想主要讲述以下几方面内容：</p>
<ol>
<li>典型的垃圾回收算法</li>
<li>典型的垃圾收集器</li>
<li>内存分配与回收策略</li>
</ol>
<p>注：本文有部分内容直接摘抄自《深入理解 Java 虚拟机》，也有部分内容直接引用自<a href="http://www.cnblogs.com/dolphin0520/p/3783345.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3783345.html</a></p>
<h1 id="2-典型的-GC-算法"><a href="#2-典型的-GC-算法" class="headerlink" title="2. 典型的 GC 算法"></a>2. 典型的 GC 算法</h1><p>在确定了哪些垃圾可以被回收后，垃圾收集器要做的事情就是开始 GC ，但是这里面涉及到一个问题是：如何高效地进行垃圾回收。由于 Java 虚拟机规范并没有对如何实现垃圾收集器做出明确的规定，因此各个厂商的虚拟机可以采用不同的方式来实现垃圾收集器，所以在此只讨论几种常见的垃圾收集算法的核心思想。</p>
<h2 id="2-1-Mark-Sweep（标记-清除）算法"><a href="#2-1-Mark-Sweep（标记-清除）算法" class="headerlink" title="2.1 Mark-Sweep（标记-清除）算法"></a>2.1 Mark-Sweep（标记-清除）算法</h2><p>标记-清除算法分为两个阶段：标记阶段和清除阶段。标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收被标记的对象所占用的空间。具体过程如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2018/02/07/Java-垃圾回收（下篇）及典型的垃圾回收算法/mark-sweep.jpg" alt="标记-清除算法示意图" title="">
                </div>
                <div class="image-caption">标记-清除算法示意图</div>
            </figure>
<p>从图中可以很容易看出标记-清除算法实现起来比较容易，但是有一个比较严重的问题就是容易产生内存碎片，碎片太多可能会导致后续过程中需要为大对象分配空间时无法找到足够的空间而提前触发新的一次垃圾收集动作。</p>
<h2 id="2-2-Copying（复制）算法"><a href="#2-2-Copying（复制）算法" class="headerlink" title="2.2 Copying（复制）算法"></a>2.2 Copying（复制）算法</h2><p>为了解决 Mark-Sweep 算法的缺陷，Copying 算法就被提了出来。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用的内存空间一次清理掉，这样一来就不容易出现内存碎片的问题。具体过程如下图所示：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2018/02/07/Java-垃圾回收（下篇）及典型的垃圾回收算法/copying.jpg" alt="复制算法示意图" title="">
                </div>
                <div class="image-caption">复制算法示意图</div>
            </figure></p>
<p>这种算法虽然实现简单，运行高效且不容易产生内存碎片，但是却对内存空间的使用做出了高昂的代价，因为能够使用的内存缩减到原来的一半。</p>
<p>很显然，Copying算法的效率跟存活对象的数目多少有很大的关系，如果存活对象很多，那么Copying算法的效率将会大大降低。</p>
<h2 id="2-3-Mark-Compact（标记-整理）算法"><a href="#2-3-Mark-Compact（标记-整理）算法" class="headerlink" title="2.3 Mark-Compact（标记-整理）算法"></a>2.3 Mark-Compact（标记-整理）算法</h2><p>为了解决Copying算法的缺陷，充分利用内存空间，提出了Mark-Compact算法。该算法标记阶段和Mark-Sweep一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2018/02/07/Java-垃圾回收（下篇）及典型的垃圾回收算法/mark-compact.jpg" alt="标记-整理" title="">
                </div>
                <div class="image-caption">标记-整理</div>
            </figure></p>
<h2 id="2-4-Generational-Collection（分代收集）算法"><a href="#2-4-Generational-Collection（分代收集）算法" class="headerlink" title="2.4 Generational Collection（分代收集）算法"></a>2.4 Generational Collection（分代收集）算法</h2><p>分代收集算法是目前大部分 JVM 的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p>
<p>目前大部分垃圾收集器对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，也就是说需要复制的操作次数较少，但是实际中并不是按照 1：1 的比例来划分新生代的空间的，一般来说是将新生代划分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中的一块 Survivor 空间，当进行回收时，将 Eden 和 Survivor 中还存活的对象复制到另一块 Survivor 空间中，然后清理掉Eden和刚才使用过的 Survivor 空间。</p>
<p>而由于老年代的特点是每次回收都只回收少量对象，一般使用的 Mark-Compact算法。</p>
<h1 id="3-典型的垃圾收集器"><a href="#3-典型的垃圾收集器" class="headerlink" title="3. 典型的垃圾收集器"></a>3. 典型的垃圾收集器</h1><p>垃圾收集算法是内存回收的理论基础，而垃圾收集器就是内存回收的具体实现。下面介绍一下 HotSpot（JDK 7) 虚拟机提供的几种垃圾收集器，用户可以根据自己的需求组合出各个年代使用的收集器。</p>
<h2 id="3-1-Serial-Serial-Old"><a href="#3-1-Serial-Serial-Old" class="headerlink" title="3.1 Serial/Serial Old"></a>3.1 Serial/Serial Old</h2><p>Serial/Serial Old收集器是最基本最古老的收集器，它是一个单线程收集器，并且在它进行垃圾收集时，必须暂停所有用户线程。Serial 收集器是针对新生代的收集器，采用的是 Copying 算法，Serial Old 收集器是针对老年代的收集器，采用的是Mark-Compact算法。它的优点是实现简单高效，但是缺点是会给用户带来停顿。</p>
<h2 id="3-2-ParNew"><a href="#3-2-ParNew" class="headerlink" title="3.2 ParNew"></a>3.2 ParNew</h2><p>ParNew收集器是Serial收集器的多线程版本，使用多个线程进行垃圾收集。</p>
<h2 id="3-3-Parallel-Scavenge"><a href="#3-3-Parallel-Scavenge" class="headerlink" title="3.3 Parallel Scavenge"></a>3.3 Parallel Scavenge</h2><p>Parallel Scavenge收集器是一个新生代的多线程收集器（并行收集器），它在回收期间不需要暂停其他用户线程，其采用的是Copying算法，该收集器与前两个收集器有所不同，它主要是为了达到一个可控的吞吐量。</p>
<h2 id="3-4-Parallel-Old"><a href="#3-4-Parallel-Old" class="headerlink" title="3.4 Parallel Old"></a>3.4 Parallel Old</h2><p>Parallel Old是Parallel Scavenge收集器的老年代版本（并行收集器），使用多线程和Mark-Compact算法。</p>
<h2 id="3-5-CMS"><a href="#3-5-CMS" class="headerlink" title="3.5 CMS"></a>3.5 CMS</h2><p>CMS（Current Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，它是一种并发收集器，采用的是Mark-Sweep算法。</p>
<h2 id="3-6-G1"><a href="#3-6-G1" class="headerlink" title="3.6 G1"></a>3.6 G1</h2><p>G1收集器是当今收集器技术发展最前沿的成果，它是一款面向服务端应用的收集器，它能充分利用多CPU、多核环境。因此它是一款并行与并发收集器，并且它能建立可预测的停顿时间模型。</p>
<h1 id="4-内存分配及回收策略"><a href="#4-内存分配及回收策略" class="headerlink" title="4. 内存分配及回收策略"></a>4. 内存分配及回收策略</h1><h2 id="4-1-对象优先在-Eden-分配"><a href="#4-1-对象优先在-Eden-分配" class="headerlink" title="4.1 对象优先在 Eden 分配"></a>4.1 对象优先在 Eden 分配</h2><p>大多数情况下，对象在新生区 Eden 区中分配，当 Eden 没有足够空间分配时，虚拟机将发起一次 Minor GC，GC后将已有对象放入Survivor中，若 Survivor 空间不足，则通过分配担保机制提前转移到老年代。</p>
<h2 id="4-2-大对象直接进入老年代"><a href="#4-2-大对象直接进入老年代" class="headerlink" title="4.2 大对象直接进入老年代"></a>4.2 大对象直接进入老年代</h2><p>所谓大对象是指需要大量连续内存空间的Java对象，例如较长的字符串和较长的数组。虚拟机提供了一个<code>-XX：PretenureSizeThreshold</code>参数，令大于这个值的参数直接在老年代分配。</p>
<h2 id="4-3-长期存活的对象进入老年代"><a href="#4-3-长期存活的对象进入老年代" class="headerlink" title="4.3 长期存活的对象进入老年代"></a>4.3 长期存活的对象进入老年代</h2><p>虚拟机既然采用了分代收集的思想来管理内存，那么内存回收时就必须能识别对象放在新生代，哪些对象放在老年代。为了做到这点，虚拟机给每个对象定义一个对象年龄计数器。如果对象在Eden出生并经过第一次 Minor GC 然后仍然存活，并且能被 Survivor 容纳的话，将被移到 Survivor 中，并且对象年龄设为 1 。对象在 Survivor 中每过一次 Minor GC，年龄就增加一岁。当年龄增加到一定程度，就会晋升到老年代。对象晋升老年代的年龄阈值，可以通过参数<code>-XX:MaxTenuringThreshold</code>设置。</p>
<h2 id="4-4-动态对象年龄判定"><a href="#4-4-动态对象年龄判定" class="headerlink" title="4.4 动态对象年龄判定"></a>4.4 动态对象年龄判定</h2><p>为了能更好的适应不同程序的内存状况，虚拟机并不是永远的要求对象必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需达到 MaxTenuringThreshold 的要求。</p>
<h2 id="4-5-空间分配担保"><a href="#4-5-空间分配担保" class="headerlink" title="4.5 空间分配担保"></a>4.5 空间分配担保</h2><p>在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。若不成立，则虚拟机会查看<code>HandlePromotionFailure</code>设置值是否担保失败，若允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小(相当于一个经验值，不保证可以成功)，如果大于，尽管这次 Minor GC 冒险，也会尝试进行一次 Minor GC ；如果小于，或者 HandlePromotionFailure 设置为不允许冒险，那么需要进行一次 Full GC。</p>
<h1 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h1><ul>
<li><p>典型的 GC 算法包括标记-清除(mark and sweep)、复制(copying)、标记-整理(mark and Compact)。目前的 JVM 大都使用分代收集算法。对于新生代都采取 Copying 算法，老年代采取标记-整理算法。</p>
</li>
<li><p>一般新生代被划分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中的一块 Survivor 空间，当进行回收时，将 Eden 和 Survivor 中还存活的对象复制到另一块 Survivor 空间中，然后清理掉Eden和刚才使用过的 Survivor 空间。</p>
</li>
<li><p>对象优先在 Eden 分配，大对象和长期存活的对象会直接进入老年代。在发生 Minor GC 之前，会检查老年代的最大可用空间来进行空间分配担保。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;在上篇中，我们提到了什么是 GC、GC 的原理、何时该 GC 等问题，但是具体的垃圾回收算法没有提到。在本篇博客中，我想
    
    </summary>
    
    
      <category term="JVM" scheme="http://llag9810.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 垃圾回收机制（上）—— GC 简介</title>
    <link href="http://llag9810.github.io/2017/12/04/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://llag9810.github.io/2017/12/04/Java-虚拟机读书笔记（二）/</id>
    <published>2017-12-04T15:13:35.000Z</published>
    <updated>2018-02-07T14:20:21.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>这篇博客对应的是《深入理解 Java 虚拟机》第三章的部分内容。包括 GC 的简单介绍、判断对象存活的方法、强软弱虚四种引用，还有<code>finalize()</code>方法的简介。有关垃圾回收算法的部分在下篇中填坑。</p>
<h1 id="2-什么是垃圾回收？"><a href="#2-什么是垃圾回收？" class="headerlink" title="2. 什么是垃圾回收？"></a>2. 什么是垃圾回收？</h1><p>说起垃圾回收(Garbage Collection,GC),大部分人都把这项技术当做Java语言的伴生产物。事实上,GC 的历史比 Java 久远,1960 年诞生于 MIT 的 Lisp 是第一门真正使用内存动态分配和垃圾收集技术的语言。当 Lisp 还在胚胎时时,人们就在思考 GC 需要完成的3件事情:</p>
<ul>
<li>哪些内存需要回收?</li>
<li>什么时候回收?</li>
<li>如何回收?</li>
</ul>
<p>回到我们熟悉的 Java 语言，不妨回顾Java内存运行时区域的各个部分。其中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生，随线程而灭。栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的(尽管在运行期会由JIT编译器<br>进行一些优化,但在本章基于概念模型的讨论中,大体上可以认为是编译期可知的。)因此这几个区域的内存分配和回收都具备确定性,在这几个区域内就不需要过多考虑回收的问题。因为方法结束或者线程结束时,内存自然就跟随着回收了。</p>
<p>而 Java 堆和方法区则不一样,一个接口中的多个实现类需要的内存可能不一样,一个方法中的多个分支需要的内存也可能不一样,我们只有在程序处于运行期间时才能知道会创建哪些对象,这部分内存的分配和回收都是动态的。</p>
<p>所以垃圾收集器所关注的是这部分（堆和方法区）内存。</p>
<h1 id="3-判断对象是否“存活”——-GC-算法简介"><a href="#3-判断对象是否“存活”——-GC-算法简介" class="headerlink" title="3. 判断对象是否“存活”—— GC 算法简介"></a>3. 判断对象是否“存活”—— GC 算法简介</h1><p>在堆里面存放着 Java 世界中几乎所有的对象实例垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”(即不可能再被任何途径使用的对象)。</p>
<p>下面简要介绍两种判断对象存活的算法:引用计数和可达性分析。</p>
<h2 id="3-1-引用计数"><a href="#3-1-引用计数" class="headerlink" title="3.1 引用计数"></a>3.1 引用计数</h2><p>引用计数是一种简单的判断对象存活的算法。其算法是这样的：</p>
<ul>
<li>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1 ；每当有一个引用失效时，计数器值就减 1 。</li>
<li>任何时刻计数器为 0 的对象就是不可能再被使用的对象，即可以被回收的对象。</li>
</ul>
<p>客观地说，引用计数算法(Reference Counting)的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是,至少主流的 Java 虚拟机里面没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间相互<strong>循环引用</strong>的问题。</p>
<p>举个简单的例子，见下面代码中的<code>testGC()</code>方法：对象 objA 和 objB 都有成员变量<code>instance</code>，令<code>objA.instance = objB</code>及<code>objB.instance = objA</code>。除此之外,这两个对象再无任何引用。也就是说实际上这两个对象已经不可能再被访问。</p>
<p>但是，它们因为互相引用着对方，导致它们的引用计数都为1，于是引用计数算法无法通知 GC 收集器回收它们。</p>
<p>（下面代码摘抄自《深入理解 Java 虚拟机》第二版 3.2.1 章节）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*testGC()方法执行后,objA和objB会不会被GC呢?</div><div class="line">*<span class="doctag">@author</span> zzm</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span>*<span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *这个成员属性的唯一意义就是占点内存,以便能在GC日志中看清楚是否被回收过</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bigSize = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span> </span>&#123;</div><div class="line">        ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC();</div><div class="line">        ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC();</div><div class="line">        objA.instance = objB;</div><div class="line">        objB.instance = objA;</div><div class="line">        objA = <span class="keyword">null</span>;</div><div class="line">        objB = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//假设在这行发生GC,objA和objB是否能被回收?</span></div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果（摘抄自书籍）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[FullGC(System)[Tenured:0K-&gt;210K(10240K),0.0149142secs]4603K-&gt;210K(19456K),[Perm:2999K-&gt;2999K(21248K)],0.0150007 secs][Times:user=0.01 sys=0.00,real=0.02 secs]</div><div class="line">Heap</div><div class="line">def new generation total 9216K,used 82K[0x00000000055e0000,0x0000000005fe0000,0x0000000005fe0000)</div><div class="line">Eden space 8192K,1%used[0x00000000055e0000,0x00000000055f4850,0x0000000005de0000)</div><div class="line">from space 1024K,0%used[0x0000000005de0000,0x0000000005de0000,0x0000000005ee0000)</div><div class="line">to space 1024K,0%used[0x0000000005ee0000,0x0000000005ee0000,0x0000000005fe0000)</div><div class="line">tenured generation total 10240K,used 210K[0x0000000005fe0000,0x00000000069e0000,0x00000000069e0000)</div><div class="line">the space 10240K,2%used[0x0000000005fe0000,0x0000000006014a18,0x0000000006014c00,0x00000000069e0000)</div><div class="line">compacting perm gen total 21248K,used 3016K[0x00000000069e0000,0x0000000007ea0000,0x000000000bde0000)</div><div class="line">the space 21248K,14%used[0x00000000069e0000,0x0000000006cd2398,0x0000000006cd2400,0x0000000007ea0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure></p>
<p>很显然，日志中的”4603k -&gt; 210k”说明这两个对象成功的被回收。这也从侧面说明了虚拟机并不是通过引用计数来实现垃圾回收的。</p>
<h2 id="3-2-可达性分析"><a href="#3-2-可达性分析" class="headerlink" title="3.2 可达性分析"></a>3.2 可达性分析</h2><p>在目前的主流语言中，基本上都是通过可达性分析(Reachability Analysis)来判定对象的存活与否。</p>
<p>这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到 GC Roots 没有任何引用链相连(用图论的话来说,就是从GC Roots到这个对象不可达)时，则证明此对象是不可用的。</p>
<p>如下图所示，对象object 5、object 6、object 7虽然互相有关联,但是它们到GC Roots是不可达的,所以它们将会被判定为是可回收的对象。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/12/04/Java-虚拟机读书笔记（二）/gcroot.png" alt="可达性分析判断回收" title="">
                </div>
                <div class="image-caption">可达性分析判断回收</div>
            </figure>
<p>在Java中，作为 GC root 的引用一般包括：</p>
<ul>
<li>栈(栈帧中的局部变量)中引用的对象。</li>
<li>方法区中类静态成员变量引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>native 方法栈中 JNI（Native 方法）引用的对象。</li>
</ul>
<h1 id="4-强、软、弱、虚四种引用"><a href="#4-强、软、弱、虚四种引用" class="headerlink" title="4. 强、软、弱、虚四种引用"></a>4. 强、软、弱、虚四种引用</h1><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。Java 中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘。</p>
<p>我们希望描述下面这种对象：当内存空间足够时，保留在内存中。当空间十分紧张时，则可以回收这些对象。于是，在 jdk 1.2以后，Java 对引用的概念进行了扩充。将引用分为强引用(Strong Reference)、软引用(Soft Reference)、弱引用(Weak Reference)、虚引用(Phantom Reference)4种,这4种引用强度依次逐渐减弱。</p>
<ul>
<li>强引用就是指在程序代码之中普遍存在的,类似<code>Object obj = new Object()</code>这类的引用。只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li>
<li>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</li>
<li>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些。被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时,无论当前内存是否足够,<br>都会回收掉只被弱引用关联的对象。WeakReference类来实现弱引用。</li>
<li>虚引用也称为幽灵引用或者幻影引用,它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。PhantomReference类来实现虚引用。</li>
</ul>
<h1 id="5-生存还是死亡？——-finalize-方法简介"><a href="#5-生存还是死亡？——-finalize-方法简介" class="headerlink" title="5. 生存还是死亡？—— finalize() 方法简介"></a>5. 生存还是死亡？—— finalize() 方法简介</h1><p>虚拟机通常使用可达性分析的方式来判断对象能否回收。即使在可达性分析算法中不可达的对象，也并非是“非死不可”的。</p>
<p>这时候它们暂时处于“缓刑”阶段。要真正宣告一个对象死亡，至少要经历<strong>两次标记过程</strong>。</p>
<p>第一次筛选的方式如下：</p>
<ul>
<li>如果对象在进行可达性分析后发现没有与 GC Root 相连接的引用链，那它将会被第一次标记并且进行一次筛选。</li>
<li>筛选的条件是此对象是否有必要执行<code>finalize()</code>方法。</li>
<li>当对象没有重写<code>finalize()</code>方法。或者<code>finalize()</code>方法已经被虚拟机调用过了，虚拟机将这两种情况都视为“没有必要执行”。</li>
</ul>
<p>也就是说，执行<code>finalize()</code>的条件有两个：一是当前对象的类重写了<code>finalize()</code>方法，二是虚拟机先前还没有调用过该方法。</p>
<p>如果这个对象被判定为有必要执行<code>finalize()</code>方法，那么这个对象将会放置在一个叫做 F-Queue 的队列之中，并在稍后由一个由虚拟机<strong>自动建立</strong>的、<strong>低优先级</strong>的 Finalizer 线程去执行它。</p>
<p>这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在<code>finalize()</code>方法中执行缓慢，或者发生了死循环(更极端的情况)，将很可能会导致 F-Queue 队列中其他对象永久处于等待,甚至导致整个内存回收系统崩溃。</p>
<p><code>finalize()</code>方法是对象逃脱死亡命运的最后一次机会，稍后 GC 将对 F-Queue 中的对象进行<strong>第二次小规模的标记</strong>。</p>
<p>如果对象想要在<code>finalize()</code>中成功拯救自己，只要重新与引用链上的任何一个对象建立关联即可，譬如把自己(this关键字)赋值给某个类变量或者对象的<br>成员变量，那在第二次标记时它将被移除出“即将回收”的集合。如果对象这时候还没有逃脱，那基本上它就真的被回收了。</p>
<p>从下面的代码中我们可以看到一个对象的<code>finalize()</code>被执行，但是它仍然可以存活。<br>（代码摘自《深入理解 Java 虚拟机》3.2章节）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*此代码演示了两点:</div><div class="line">*1. 对象可以在被GC时自我拯救。</div><div class="line">*2. 这种自救的机会只有一次,因为一个对象的finalize()方法最多只会被系统自动调用一次</div><div class="line">*<span class="doctag">@author</span> zzm</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeEscapeGC</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeEscapeGC SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"yes,i am still alive:)"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">super</span>.finalize();</div><div class="line">        System.out.println(<span class="string">"finalize mehtod executed!"</span>);</div><div class="line">         <span class="comment">// 将自身赋值给一个静态成员变量，进行自我拯救</span></div><div class="line">        FinalizeEscapeGC.SAVE_HOOK = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        SAVE_HOOK = <span class="keyword">new</span> FinalizeEscapeGC();</div><div class="line">        <span class="comment">// 将SAVE_HOOK置null，使对象不可达。触发自救</span></div><div class="line">        SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        <span class="comment">// 因为finalize方法优先级很低,所以暂停0.5秒以等待它</span></div><div class="line">        Thread.sleep(<span class="number">500</span>);</div><div class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="keyword">null</span>) &#123;</div><div class="line">            SAVE_HOOK.isAlive();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"no,i am dead:("</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 下面这段代码与上面的完全相同,但是这次自救却失败了</span></div><div class="line">        SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        Thread.sleep(<span class="number">500</span>);</div><div class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="keyword">null</span>) &#123;</div><div class="line">            SAVE_HOOK.isAlive();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"no,i am dead:("</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">finalize mehtod executed!</div><div class="line">yes,i am still alive:)</div><div class="line">no,i am dead:(</div></pre></td></tr></table></figure></p>
<p>从结果可以看出，第一次SAVE_HOOK 对象的<code>finalize()</code>方法确实被 GC 收集器触发过,并且在被收集前成功逃脱了。<br>另外一个值得注意的地方是，main函数代码中有两段完全一样的代码片段，执行结果却是一次逃脱成功，一次失败。这是因为任何一个对象的<code>finalize()</code>方法都<strong>只会被系统自动调用一次</strong>。<br>如果对象面临下一次回收，它的<code>finalize()</code>方法不会被再次执行，因此第二段代码的自救行动失败了。</p>
<h1 id="6-回收方法区"><a href="#6-回收方法区" class="headerlink" title="6. 回收方法区"></a>6. 回收方法区</h1><p>很多人认为方法区(或者 HotSpot 虚拟机中的永久代)是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区中进行垃圾收集的“性价比”一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。<br>永久代的垃圾收集主要回收两部分内容:废弃常量和无用的类。回收废弃常量与回收 Java 堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中, 但是当前系统没有任何一个 String 对象是叫做“abc”的, 换句话说,就是没有任何 String 对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果这时发生内存回收，而且必要的话，这个“abc”常量就会被系统清理出常量池。常量池中的其他类(接口)、方法、字段的符号引用也与此类似。<br>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面3个条件才能算是“无用的类”:</p>
<ul>
<li>该类所有的实例都已经被回收,也就是 Java 堆中不存在该类的任何实例。</li>
<li>加载该类的 ClassLoader 已经被回收。</li>
<li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<h1 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h1><ul>
<li><p>判断对象能否回收的算法包括引用计数和可达性分析两种。前者实现较为简单，但是会有循环引用的问题。目前的主流语言使用的都是后者。在 Java 中，GC root 包括栈中的引用对象，方法区中的 static 引用和常量、native 方法中引用的对象。</p>
</li>
<li><p>强、软、弱、虚四种引用强度依次减弱。其中，强引用即代码中最常见的赋值引用，强引用只要存在就不会被回收。后面三种引用都是用 Java 中提供的类来使用。其中软引用会在系统即将发生内存异常时列入回收范围，当回收后内存依然不够时，会被回收。弱引用只要 GC 工作，无论内存足够与否都会被回收。虚引用无法通过其获得对象示例，只是会在被回收时通知。</p>
</li>
<li><p>在 GC 时调用<code>finalize()</code>需要满足两个条件：当前对象的类重写了<code>finalize()</code>方法，二是虚拟机先前还没有调用过该方法。如果这个对象被判定为有必要执行<code>finalize()</code>方法，会放置在 F-Queue 中由低优先级线程 Finalizer 来执行。如果对象想要在<code>finalize()</code>中成功拯救自己，只要重新与引用链上的任何一个对象建立关联即可。每个对象的<code>finalize()</code><strong>只能执行一次</strong>，也就是说只有一次机会。</p>
</li>
</ul>
<p>最后引用书本上的一段话结束这篇博客：</p>
<blockquote>
<p>需要特别说明的是，上面关于对象死亡时 finalize() 方法的描述可能带有悲情的艺术色彩，笔者并不鼓励大家使用这种方法来拯救对象。相反，笔者建议大家尽量避免使用它，因为它不是 C/C++ 中的析构函数，而是 Java 刚诞生时为了使 C/C++ 程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中描述它适合做“关闭外部资源”之类的工作，这完全是对这个方法用途的一种自我安慰。finalize()能做的所有工作，使用 try-finally 或者其他方式都可以做得更好、更及时，所以笔者建议大家完全可以忘掉Java语言中有这个方法的存在。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;这篇博客对应的是《深入理解 Java 虚拟机》第三章的部分内容。包括 GC 的简单介绍、判断对象存活的方法、强软弱虚四种
    
    </summary>
    
    
      <category term="JVM" scheme="http://llag9810.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList 源码解析</title>
    <link href="http://llag9810.github.io/2017/09/03/ArrayList-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://llag9810.github.io/2017/09/03/ArrayList-源码解析/</id>
    <published>2017-09-03T04:41:55.000Z</published>
    <updated>2018-02-03T05:21:39.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList-简介"><a href="#ArrayList-简介" class="headerlink" title="ArrayList 简介"></a>ArrayList 简介</h1><p>ArrayList 是一个数组队列，相当于 动态数组。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p>
<p>ArrayList 实现了 RandmoAccess 接口，即提供了随机访问功能。RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。稍后，我们会比较List的“快速随机访问”和“通过 Iterator 迭代器访问”的效率。</p>
<p>ArrayList 实现了 Cloneable 接口，即覆盖了函数<code>clone()</code>，能被克隆。</p>
<p>ArrayList 实现 <code>java.io.Serializable</code> 接口，这意味着 ArrayList 支持序列化，能通过序列化去传输。</p>
<p>下面让我们翻开 ArrayList 的源代码，看看一些常用的方法属性，以及一些需要注意的地方。</p>
<h1 id="ArrayList-属性"><a href="#ArrayList-属性" class="headerlink" title="ArrayList 属性"></a>ArrayList 属性</h1><p>ArrayList 属性主要就是当前数组长度size，以及存放数组的对象    elementData 数组，除此之外还有一个经常用到的属性就是从 AbstractList 继承过来的 modCount 属性，代表ArrayList集合的修改次数。关于modCount的作用后面讲到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </div><div class="line">    <span class="comment">// 序列化id  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;  </div><div class="line">    <span class="comment">// 默认初始的容量  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;  </div><div class="line">    <span class="comment">// 一个空对象  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = <span class="keyword">new</span> Object[<span class="number">0</span>];  </div><div class="line">    <span class="comment">// 一个空对象，如果使用默认构造函数创建，则默认对象内容默认是该值  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = <span class="keyword">new</span> Object[<span class="number">0</span>];  </div><div class="line">    <span class="comment">// 当前数据对象存放地方，当前对象不参与序列化  </span></div><div class="line">    <span class="keyword">transient</span> Object[] elementData;  </div><div class="line">    <span class="comment">// 当前数组长度  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;  </div><div class="line">    <span class="comment">// 数组最大长度  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = <span class="number">2147483639</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">// 省略方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="ArrayList-构造函数"><a href="#ArrayList-构造函数" class="headerlink" title="ArrayList 构造函数"></a>ArrayList 构造函数</h1><h2 id="默认构造函数（空参数）"><a href="#默认构造函数（空参数）" class="headerlink" title="默认构造函数（空参数）"></a>默认构造函数（空参数）</h2><p>也就是我们最常用的不带参数的构造，<br>如果不传入参数，则使用默认无参构建方法创建ArrayList对象，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：此时我们创建的ArrayList对象中的 elementData 中的长度是1，size 是 0 ,当进行第一次add的时候，elementData 将会变成默认的长度：10。</p>
<h2 id="接受一个-int-参数构造函数"><a href="#接受一个-int-参数构造函数" class="headerlink" title="接受一个 int 参数构造函数"></a>接受一个 int 参数构造函数</h2><p>如果传入参数，则代表指定ArrayList的初始数组长度，传入参数如果是大于等于0，则使用用户的参数初始化，如果用户传入的参数小于0，则抛出异常，构造方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;  </div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];  </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;  </div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+ initialCapacity);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="接受一个-Collection-的构造"><a href="#接受一个-Collection-的构造" class="headerlink" title="接受一个 Collection 的构造"></a>接受一个 Collection 的构造</h2><p>在构造一个 ArrayList 时，可以直接传入一个<code>Collection</code>，将已有的集合构造为一个 List。构造过程可以概括为：</p>
<p>(1) 将collection对象转换成数组，然后将数组的地址的赋给elementData。</p>
<p>(2) 更新size的值，同时判断size的大小，如果是size等于0，直接将空对象EMPTY_ELEMENTDATA的地址赋给elementData</p>
<p>(3) 如果size的值大于0，则执行Arrays.copy方法，把 collection 对象的内容（可以理解为深拷贝）copy到elementData中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  </div><div class="line">    elementData = c.toArray();  </div><div class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;  </div><div class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)  </span></div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)  </div><div class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="comment">// replace with empty array.  </span></div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="add-方法"><a href="#add-方法" class="headerlink" title="add 方法"></a>add 方法</h1><p>add 的方法有两个，一个是带一个参数的，一个是带两个参数的，下面我们一个个讲解。</p>
<h2 id="一个参数的-add"><a href="#一个参数的-add" class="headerlink" title="一个参数的 add"></a>一个参数的 add</h2><p><code>add(E e)</code> 方法主要的执行逻辑如下：</p>
<p>1）确保数组已使用长度（size）加1之后足够存下 下一个数据</p>
<p>2）修改次数modCount 标识自增1，如果当前数组已使用长度（size）加1后的大于当前的数组长度，则调用grow方法，增长数组，grow方法会将当前数组的长度变为原来容量的1.5倍。</p>
<p>3）确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。</p>
<p>4）返回添加成功布尔值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;  </div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!  </span></div><div class="line">    elementData[size++] = e;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>确保添加的元素有地方存储，当第一次添加元素的时候this.size+1 的值是1，所以第一次添加的时候会将当前elementData数组的长度变为10：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;  </div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    ensureExplicitCapacity(minCapacity);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将修改次数（modCount）自增1，判断是否需要扩充数组长度,判断条件就是用当前所需的数组最小长度与数组的长度对比，如果大于0，则增长数组长度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;  </div><div class="line">    modCount++;  </div><div class="line">  </div><div class="line">    <span class="comment">// overflow-conscious code  </span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)  </div><div class="line">        grow(minCapacity);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果当前的数组已使用空间（size）加1之后 大于数组长度，则增大数组容量，扩大为原来的1.5倍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> arg1 = <span class="keyword">this</span>.elementData.length;  </div><div class="line">    <span class="keyword">int</span> arg2 = arg1 + (arg1 &gt;&gt; <span class="number">1</span>);  </div><div class="line">    <span class="keyword">if</span> (arg2 - arg0 &lt; <span class="number">0</span>) &#123;  </div><div class="line">        arg2 = arg0;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (arg2 - <span class="number">2147483639</span> &gt; <span class="number">0</span>) &#123;  </div><div class="line">        arg2 = hugeCapacity(arg0);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">this</span>.elementData = Arrays.copyOf(<span class="keyword">this</span>.elementData, arg2);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="两个参数的-add"><a href="#两个参数的-add" class="headerlink" title="两个参数的 add"></a>两个参数的 add</h2><p><code>add(int index, E element)</code>方法其实和上面的add类似，该方法可以按照元素的位置，指定位置插入元素，具体的执行逻辑如下：</p>
<p>1）确保数插入的位置小于等于当前数组长度，并且不小于0，否则抛出异常</p>
<p>2）确保数组已使用长度（size）加1之后足够存下 下一个数据</p>
<p>3）修改次数（modCount）标识自增1，如果当前数组已使用长度（size）加1后的大于当前的数组长度，则调用grow方法，增长数组</p>
<p>4）grow方法会将当前数组的长度变为原来容量的1.5倍。</p>
<p>5）确保有足够的容量之后，使用System.arraycopy 将需要插入的位置（index）后面的元素统统往后移动一位。</p>
<p>6）将新的数据内容存放到数组的指定位置（index）上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;  </div><div class="line">    rangeCheckForAdd(index);  </div><div class="line">  </div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!  </span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,  </div><div class="line">                     size - index);  </div><div class="line">    elementData[index] = element;  </div><div class="line">    size++;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：使用该方法的话将导致指定位置后面的数组元素全部重新移动，即往后移动一位。</p>
<h1 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h1><p>返回指定位置元素。不多讲<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">    rangeCheck(index);  </div><div class="line">    checkForComodification();  </div><div class="line">    <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h1><p>确保set的位置小于当前数组的长度（size）并且大于0，获取指定位置（index）元素，然后放到 oldValue 存放，将需要设置的元素放到指定的位置（index）上，然后将原来位置上的元素 oldValue 返回给用户。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;  </div><div class="line">    rangeCheck(index);  </div><div class="line">  </div><div class="line">    E oldValue = elementData(index);  </div><div class="line">    elementData[index] = element;  </div><div class="line">    <span class="keyword">return</span> oldValue;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h1><p>调用 indexOf 方法，遍历数组中的每一个元素作对比，如果找到对于的元素，则返回 true，没有找到则返回 false。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)  </div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)  </div><div class="line">                <span class="keyword">return</span> i;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)  </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))  </div><div class="line">                <span class="keyword">return</span> i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h1><h2 id="根据-index-下标-remove"><a href="#根据-index-下标-remove" class="headerlink" title="根据 index 下标 remove"></a>根据 index 下标 remove</h2><p>1）判断下标有没有越界</p>
<p>2）自增 modCount</p>
<p>3）将指定位置（index）上的元素保存到 oldValue</p>
<p>4）将指定位置（index）上的元素都往前移动一位</p>
<p>5）将最后面的一个元素置空，好让垃圾回收器回收</p>
<p>6）将原来的值 oldValue 返回</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">    rangeCheck(index);  </div><div class="line">  </div><div class="line">    modCount++;  </div><div class="line">    E oldValue = elementData(index);  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  </div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,  </div><div class="line">                         numMoved);  </div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work  </span></div><div class="line">  </div><div class="line">    <span class="keyword">return</span> oldValue;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：调用这个方法不会缩减数组的长度，只是将最后一个数组元素置空而已。</p>
<h2 id="根据对象remove"><a href="#根据对象remove" class="headerlink" title="根据对象remove"></a>根据对象remove</h2><p>循环遍历所有对象，得到对象所在索引位置，然后调用fastRemove方法，执行remove操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)  </div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;  </div><div class="line">                fastRemove(index);  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">            &#125;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)  </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;  </div><div class="line">                fastRemove(index);  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">            &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定位到需要remove的元素索引，先将index后面的元素往前面移动一位（调用<code>System.arrayCopy</code>实现），然后将最后一个元素置空。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">    modCount++;  </div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  </div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,  </div><div class="line">                         numMoved);  </div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="trimToSize方法"><a href="#trimToSize方法" class="headerlink" title="trimToSize方法"></a>trimToSize方法</h1><p>1）modCount 加1</p>
<p>2）将 elementData 中空余的空间（包括null值）去除，例如：数组长度为10，其中只有前三个元素有值，其他为空，那么调用该方法之后，数组的长度变为3。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;  </div><div class="line">    modCount++;  </div><div class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;  </div><div class="line">        elementData = (size == <span class="number">0</span>)  </div><div class="line">          ? EMPTY_ELEMENTDATA  </div><div class="line">          : Arrays.copyOf(elementData, size);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>iterator 方法返回的是一个内部类，由于内部类的创建默认含有外部的 this指针，所以这个内部类可以调用到外部类的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般的话，调用完<code>iterator()</code>之后，我们会使用迭代器做遍历，这里使用next做遍历的时候有个需要注意的地方，就是调用next的时候，可能会引发<code>ConcurrentModificationException</code>，当修改次数，与期望的修改次数（调用iterator方法时候的修改次数）不一致的时候，会发生该异常，详细我们看一下代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;  </div><div class="line">    checkForComodification();  </div><div class="line">    <span class="keyword">int</span> i = cursor;  </div><div class="line">    <span class="keyword">if</span> (i &gt;= size)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();  </div><div class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;  </div><div class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  </div><div class="line">    cursor = i + <span class="number">1</span>;  </div><div class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>expectedModCount 这个值是在用户调用 ArrayList 的 iterator 方法时候确定的，但是在这之后用户 add ，或者 remove 了 ArrayList 的元素，那么 modCount 就会改变，那么这个值就会不相等，将会引发 ConcurrentModificationException 异常，这个是在多线程使用情况下，比较常见的一个异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>ArrayList还有以下一些特点：</p>
<ul>
<li>ArrayList自己实现了序列化和反序列化的方法，因为它自己实现了 <code>private void writeObject(java.io.ObjectOutputStream s)</code>和 <code>private void readObject(java.io.ObjectInputStream s)</code>方法</li>
<li>ArrayList基于数组方式实现，无容量的限制（数组填满时会扩容至原容量的1.5倍）</li>
<li>删除元素时不会减少容量（若希望减少容量，trimToSize()），删除元素时，将删除掉的位置元素置为null，下次gc就会回收这些元素所占的内存空间。</li>
<li>线程不安全</li>
<li>add(int index, E element)：添加元素到数组中指定位置的时候，需要将该位置及其后边所有的元素都整块向后复制一位</li>
<li>get(int index)：获取指定位置上的元素时，可以通过索引直接获取（O(1)）</li>
<li>remove(Object o)需要遍历数组</li>
<li>remove(int index)不需要遍历数组，只需判断index是否符合条件即可，效率比remove(Object o)高</li>
<li>contains(E)需要遍历数组</li>
<li>使用iterator遍历时不能做修改，否则会引发多线程异常</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ArrayList-简介&quot;&gt;&lt;a href=&quot;#ArrayList-简介&quot; class=&quot;headerlink&quot; title=&quot;ArrayList 简介&quot;&gt;&lt;/a&gt;ArrayList 简介&lt;/h1&gt;&lt;p&gt;ArrayList 是一个数组队列，相当于 动态数组。与Ja
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java 虚拟机（一）</title>
    <link href="http://llag9810.github.io/2017/06/21/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://llag9810.github.io/2017/06/21/Java-虚拟机（一）/</id>
    <published>2017-06-21T10:57:08.000Z</published>
    <updated>2018-02-08T08:43:37.478Z</updated>
    
    <content type="html"><![CDATA[<p>这部分博客对应的是《深入理解 Java 虚拟机》第二章的部分内容，关于 OOM 异常的部分后面再填坑。</p>
<h1 id="运行时数据区-Runtime-Data-Area"><a href="#运行时数据区-Runtime-Data-Area" class="headerlink" title="运行时数据区 Runtime Data Area"></a>运行时数据区 Runtime Data Area</h1><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区<br>域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而<br>存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据Java虚拟机规范的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/06/21/Java-虚拟机（一）/area.png" alt="Runtime data area" title="">
                </div>
                <div class="image-caption">Runtime data area</div>
            </figure>
<p>单个线程内共享的区：</p>
<ul>
<li>PC Register 寄存器</li>
<li>JVM Stack 虚拟机栈</li>
<li>Native Method Stack 本地方法栈</li>
</ul>
<p>所有线程共享的区：</p>
<ul>
<li>Heap 堆</li>
<li>Method Area 方法区，including Runtime Constant Pool 常量池</li>
</ul>
<h2 id="PC-Register"><a href="#PC-Register" class="headerlink" title="PC Register"></a>PC Register</h2><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能<br>会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选<br>取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需<br>要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，<br>在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线<br>程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立<br>的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私<br>有”的内存。<br>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值是未定义的。</p>
<h2 id="JVM-Stack"><a href="#JVM-Stack" class="headerlink" title="JVM Stack"></a>JVM Stack</h2><p>每个线程对应一个Java虚拟机栈。在线程创建时同时创建。用于存储栈帧。JVM栈和一般语言，比如 C 语言的栈类似：它存储局部变量和与一些尚未算好的结果，在方法调用和返回时起到很重要作用。因为除了栈帧的出栈和入栈之外，Java 虚拟机栈不会再受其他因素的影响，所以栈帧可以在堆中分配。Java 虚拟机栈所使用的内存不需要保证是连续的。</p>
<p>（请注意避免混淆 Stack、Heap 和 Java Stack、Java Heap 的概念，Java 虚拟机的实现本质上是由其他语言所编写的应用程序，Java 语言程序里分配在 Java Stack 中的数据，从实现虚拟机的程序角度上看则可能分配在 Heap 之中）</p>
<h2 id="native-stack"><a href="#native-stack" class="headerlink" title="native stack"></a>native stack</h2><p>Java 虚拟机实现可能会使用到传统的栈（通常称为 C stack）来支持 native 方法（指使<br>用 Java 以外的其他语言编写的方法）的执行，这个栈就是本地方法栈（native method stack）。<br>当 Java 虚拟机使用其他语言（例如 C 语言）来实现指令集解释器时，也可以使用本地方法<br>栈。如果 Java 虚拟机不支持 native 方法，或是本身不依赖传统栈，那么可以不提供本地<br>方法栈，如果支持本地方法栈，那这个栈一般会在线程创建的时候按线程分配。<br>Java 虚拟机规范允许本地方法栈实现成固定大小或者根据计算来动态扩展和收缩。如<br>果采用固定大小的本地方法栈，那么每一个线程的本地方法栈容量可以在创建栈的时候独立<br>选定。</p>
<h2 id="Java-Heap"><a href="#Java-Heap" class="headerlink" title="Java Heap"></a>Java Heap</h2><p>Java 虚拟机中，堆（heap）是可供各个线程共享的运行时内存区域，也是供所有类实<br>例和数组对象分配内存的区域。<br>Java 堆在虚拟机启动的时候就被创建，它存储了被自动内存管理系统（automatic storage management system，也就是常说的 garbage collector（GC, 垃圾收集器））所管理的各种对象。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>在 Java 虚拟机中，方法区（method area）是可供各个线程共享的运行时内存区域。方法<br>区与传统语言中的编译代码存储区（storage area for compiled code）或者操作系统进程的正文段（text segment）的作用非常类似，它存储了每一个类的结构信息，例如，运行时常量池（runtime constant pool）、字段和方法数据、构造函数和普通方法的字节码内容，还包括一些在类、实例、接口初始化时用到的特殊方法。<br>方法区在虚拟机启动的时候创建，虽然方法区是堆的逻辑组成部分，但是简单的虚拟机实<br>现可以选择在这个区域不实现垃圾收集与压缩。这个版本的 Java 虚拟机规范也不限定实现方<br>法区的内存位置和编译代码的管理策略。方法区的容量可以是固定的，也可以随着程序执行的<br>需求动态扩展，并在不需要过多空间时自动收缩。方法区在实际内存空间中可以是不连续的。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于<br>存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>Java虚拟机对Class文件每一部分（自然也包括常量池）的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行，但对于运行时常量池，Java虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。<br>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern（）方法。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/06/21/Java-虚拟机（一）/2.png" alt="Java堆栈示意图" title="">
                </div>
                <div class="image-caption">Java堆栈示意图</div>
            </figure>
<h1 id="Class-文件简介"><a href="#Class-文件简介" class="headerlink" title="Class 文件简介"></a>Class 文件简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>class文件是一种8位字节的二进制流文件， 各个数据项按顺序紧密的从前向后排列， 相邻的项之间没有间隙， 这样可以使得class文件非常紧凑， 体积轻巧， 可以被JVM快速的加载至内存， 并且占据较少的内存空间。 我们的Java源文件， 在被编译之后， 每个类（或者接口）都单独占据一个class文件， 并且类中的所有信息都会在class文件中有相应的描述， 由于class文件很灵活，它甚至比Java源文件有着更强的描述能力。</p>
<p>class文件中的信息是一项一项排列的， 每项数据都有它的固定长度， 有的占一个字节， 有的占两个字节， 还有的占四个字节或8个字节， 数据项的不同长度分别用u1, u2, u4, u8表示， 分别表示一种数据项在class文件中占据一个字节， 两个字节， 4个字节和8个字节。 可以把u1, u2, u3, u4看做class文件数据项的“类型” 。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/06/21/Java-虚拟机（一）/class1.png" alt="class文件" title="">
                </div>
                <div class="image-caption">class文件</div>
            </figure>
<h2 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h2><table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">名称</th>
<th style="text-align:right">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u4</td>
<td style="text-align:center">magic</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">minor_version</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">major_version</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">constant_pool_count</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>cp_info</td>
<td style="text-align:center">constant_pool</td>
<td style="text-align:right">constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">access_flags</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">this_class</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">super_class</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">interfaces_count</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">interfaces</td>
<td style="text-align:right">interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">fields_count</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>field_info</td>
<td style="text-align:center">fields</td>
<td style="text-align:right">fields_count</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">methods_count</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>method_info</td>
<td style="text-align:center">methods</td>
<td style="text-align:right">methods_count</td>
</tr>
<tr>
<td>u2</td>
<td style="text-align:center">attribute_count</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>attribute_info</td>
<td style="text-align:center">attributes</td>
<td style="text-align:right">attributes_count</td>
</tr>
</tbody>
</table>
<h3 id="魔数、版本号"><a href="#魔数、版本号" class="headerlink" title="魔数、版本号"></a>魔数、版本号</h3><h4 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h4><p>在class文件开头的四个字节， 存放着class文件的魔数， 这个魔数是class文件的标志，他是一个固定的值： 0XCAFEBABE 。 也就是说他是判断一个文件是不是class格式的文件的标准， 如果开头四个字节不是0XCAFEBABE， 那么就说明它不是class文件， 不能被JVM识别。</p>
<h4 id="minor-version-和-major-version"><a href="#minor-version-和-major-version" class="headerlink" title="minor_version 和 major_version"></a>minor_version 和 major_version</h4><p>紧接着魔数的四个字节是class文件的此版本号和主版本号。 随着Java的发展， class文件的格式也会做相应的变动。 版本号标志着class文件在什么时候， 加入或改变了哪些特性。 举例来说， 不同版本的javac编译器编译的class文件， 版本号可能不同， 而不同版本的JVM能识别的class文件的版本号也可能不同， 一般情况下， 高版本的JVM能识别低版本的javac编译器编译的class文件， 而低版本的JVM不能识别高版本的javac编译器编译的class文件。 如果使用低版本的JVM执行高版本的class文件， JVM会抛出java.lang.UnsupportedClassVersionError 。</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>在class文件中， 位于版本号后面的就是常量池相关的数据项。 常量池是class文件中的一项非常重要的数据。 常量池中存放了文字字符串， 常量值， 当前类的类名， 字段名， 方法名， 各个字段和方法的描述符， 对当前类的字段和方法的引用信息， 当前类中对其他类的引用信息等等。 常量池中几乎包含类中的所有信息的描述， class文件中的很多其他部分都是对常量池中的数据项的引用，比如后面要讲到的this_class, super_class, field_info, attribute_info等， 另外字节码指令中也存在对常量池的引用， 这个对常量池的引用当做字节码指令的一个操作数。  此外， 常量池中各个项也会相互引用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分博客对应的是《深入理解 Java 虚拟机》第二章的部分内容，关于 OOM 异常的部分后面再填坑。&lt;/p&gt;
&lt;h1 id=&quot;运行时数据区-Runtime-Data-Area&quot;&gt;&lt;a href=&quot;#运行时数据区-Runtime-Data-Area&quot; class=&quot;head
    
    </summary>
    
    
      <category term="JVM" scheme="http://llag9810.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Stanford Algorithms Divide and Conquer笔记</title>
    <link href="http://llag9810.github.io/2017/03/26/Stanford-Algorithms-Divide-and-Conquer%E7%AC%94%E8%AE%B01/"/>
    <id>http://llag9810.github.io/2017/03/26/Stanford-Algorithms-Divide-and-Conquer笔记1/</id>
    <published>2017-03-26T15:35:53.000Z</published>
    <updated>2018-02-05T15:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斯坦福算法课踩坑系列-S01E01"><a href="#斯坦福算法课踩坑系列-S01E01" class="headerlink" title="斯坦福算法课踩坑系列 S01E01"></a>斯坦福算法课踩坑系列 S01E01</h1><h2 id="写在正题前"><a href="#写在正题前" class="headerlink" title="写在正题前"></a>写在正题前</h2><p>还没开始学算法，数据结构也是半吊子。脑抽在 Coursera 上面跟了这门课，上了几节后听别人说另外一门 Prinston 的讲得更接地气，少了很多数学证明，也多了很多实现细节。总之，已经买了也不能中途弃坑。所以自己打算写个长期系列。</p>
<p>言归正传，这门课主要分为以下四个部分：</p>
<ul>
<li>Divide and Conquer, Sorting and Searching, and Randomized Algorithms.</li>
<li>Graph Search, Shortest Paths, and Data Structures.</li>
<li>Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming.</li>
<li>Shortest Paths Revisited, NP-Complete Problems and What To Do About Them.</li>
</ul>
<p>目前我上完了第一部分，也就是分治、排序、搜索和随机算法。</p>
<p>第一集先整理这两个部分：归并排序、寻找逆序对。</p>
<h2 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序(Merge Sort)"></a>归并排序(Merge Sort)</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/26/Stanford-Algorithms-Divide-and-Conquer笔记1/Merge-sort-example.gif" alt="一图流，不展开讲" title="">
                </div>
                <div class="image-caption">一图流，不展开讲</div>
            </figure>
<p>这个没什么可以记笔记的。顾名思义，归并排序分为两步。<br>第一，递归的把数组二分；第二，一层一层的把已经排序的两个小数组进行合并。</p>
<p>伪代码大致如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    mergeSort(a, n / <span class="number">2</span>);</div><div class="line">    mergeSort(a + n / <span class="number">2</span>, n / <span class="number">2</span>);</div><div class="line">    merge(a, a + n / <span class="number">2</span>, n / <span class="number">2</span>, n - n / <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，前两步分治为两个子问题，最后一步是进行归并。<br>合并的过程也很简单。由于两个子数组已经排好序，所以同时对两个数组，两个指针进行一次遍历即可。<br>自己随手实现了下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> b[], <span class="keyword">int</span> size_a, <span class="keyword">int</span> size_b, <span class="keyword">int</span> temp[])</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; size_a + size_b; count++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a[i] &lt; b[j] &amp;&amp; i &lt; size_a || j == size_b)</div><div class="line">            temp[count] = a[i++];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt;= b[j] &amp;&amp; j &lt; size_b || i == size_a)</div><div class="line">            temp[count] = b[j++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; size_a + size_b; count++) &#123;</div><div class="line">        a[count] = temp[count];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span>* temp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    mergeSort(a, n / <span class="number">2</span>, temp);</div><div class="line">    mergeSort(a + n / <span class="number">2</span>, n - n / <span class="number">2</span>, temp + n / <span class="number">2</span>);</div><div class="line"></div><div class="line">    merge(a, a + n / <span class="number">2</span>, n / <span class="number">2</span>, n - n / <span class="number">2</span>, temp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">int</span> *temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(a));</div><div class="line"></div><div class="line">    mergeSort(a, <span class="number">8</span>, temp);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>); i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="寻找逆序对-Counting-Inversions"><a href="#寻找逆序对-Counting-Inversions" class="headerlink" title="寻找逆序对(Counting Inversions)"></a>寻找逆序对(Counting Inversions)</h2><p>要求：</p>
<blockquote>
<p>Input : array A containing the numbers 1,2,3,..,n in some arbitrary order.</p>
<p>Output : number of inversions =  number of pairs(i,j) of array indices with i &lt; j and A[i] &gt; A[j].</p>
</blockquote>
<p>分析：要求的逆序对可以分为三种情况。</p>
<ul>
<li>情况1：i, j都在数组的前半边。</li>
<li>情况2：i, j都在数组的后半边。</li>
<li>情况3：i, j分别位于数组的前、后半边。</li>
</ul>
<p>对于前两种情况，直接递归即可，然后加上第三种情况的结果即为所求。</p>
<p>伪代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">count(array A, length n)</div><div class="line">    if n = 1, return 0;</div><div class="line"></div><div class="line">    x = count(half of A, n / 2);</div><div class="line">    y = count(2nd half of A, n / 2);</div><div class="line">    z = countSplitInversion(A, n);     // Not implemented yet</div><div class="line">    </div><div class="line">    return x + y + z;</div></pre></td></tr></table></figure></p>
<p>Goal : implement CountSplitInversions in linear (O(n)) time then count will run in O(nlog(n)) time.</p>
<p>寻找 split inversion 的过程和归并排序的合并过程类似。我们不妨看几个例子：</p>
<ol>
<li><p>假如数组中不存在 Split Inversions</p>
<p> 比如：<code>A = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</code></p>
<p> 进行分治后，</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A = &#123;0, 1, 2, 3, 4&#125;</div><div class="line">B = &#123;5, 6, 7, 8, 9&#125;</div></pre></td></tr></table></figure>
<p> 也就是说，前半个数组中所有的元素都比后半个数组小。对该数组进行归并，使用 i, j 两指针。此时，当 i 走到头时，j 尚未移动。</p>
</li>
<li><p>假如数组中存在 m 个 Split Inversions</p>
<p> 比如：<code>A = {0, 1, 2, 3, 8, 4, 5, 6, 7, 9}</code></p>
<p> 进行分治后，</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A = &#123;0, 1, 2, 3, 8&#125;</div><div class="line">B = &#123;4, 5, 6, 7, 9&#125;</div></pre></td></tr></table></figure>
<p> 执行归并的过程，i 到终点以后，j 指向7，也就是第4个元素。<br> 这个数组中有4个逆序对。</p>
</li>
</ol>
<p>规律很显然，当一个指针走到头时，另一个指针的位置就是逆序对的个数。</p>
<p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">countSplitInversions</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> size_a, <span class="keyword">int</span> size_b, <span class="keyword">int</span> *temp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; size_a + size_b; count++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a[i] &lt;= b[j] &amp;&amp; i != size_a || j == size_b) &#123;</div><div class="line">            temp[count] = a[i++];</div><div class="line">            num += j;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; b[j] &amp;&amp; j != size_b || i == size_a) &#123;</div><div class="line">            temp[count] = b[j++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; size_a + size_b; count++) &#123;</div><div class="line">        a[count] = temp[count];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">countInversions</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> *temp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> x = countInversions(a, n / <span class="number">2</span>, temp);</div><div class="line">    <span class="keyword">int</span> y = countInversions(a + n / <span class="number">2</span>, n - n / <span class="number">2</span>, temp + n / <span class="number">2</span>);</div><div class="line">    <span class="keyword">int</span> z = countSplitInversions(a, a + n / <span class="number">2</span>, n / <span class="number">2</span>, n - n / <span class="number">2</span>, temp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x + y + z;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> *temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(a));</div><div class="line">    <span class="keyword">int</span> result = countInversions(a, <span class="number">11</span>, temp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;斯坦福算法课踩坑系列-S01E01&quot;&gt;&lt;a href=&quot;#斯坦福算法课踩坑系列-S01E01&quot; class=&quot;headerlink&quot; title=&quot;斯坦福算法课踩坑系列 S01E01&quot;&gt;&lt;/a&gt;斯坦福算法课踩坑系列 S01E01&lt;/h1&gt;&lt;h2 id=&quot;写在正题前
    
    </summary>
    
    
      <category term="算法" scheme="http://llag9810.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制——Handler机制详解</title>
    <link href="http://llag9810.github.io/2017/03/13/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E2%80%94%E2%80%94Handler%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://llag9810.github.io/2017/03/13/Android消息机制——Handler机制详解/</id>
    <published>2017-03-13T10:47:16.000Z</published>
    <updated>2017-03-24T11:25:34.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Handler-机制详解"><a href="#Android-Handler-机制详解" class="headerlink" title="Android Handler 机制详解"></a>Android Handler 机制详解</h1><h2 id="一些基础回顾"><a href="#一些基础回顾" class="headerlink" title="一些基础回顾"></a>一些基础回顾</h2><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><blockquote>
<p>主线程：也叫UI线程，或称ActivityThread，用于运行四大组件和处理他们用户的交互。 ActivityThread管理应用进程的主线程的执行(相当于普通Java程序的main入口函数)，在Android系统中，在默认情况下，一个应用程序内的各个组件(如Activity、BroadcastReceiver、Service)都会在同一个进程(Process)里执行，且由此进程的主线程负责执行。<br>ActivityThread既要处理Activity组件的UI事件，又要处理Service后台服务工作，通常会忙不过来。为了解决此问题，主线程可以创建多个子线程来处理后台服务工作，而本身专心处理UI画面的事件。</p>
<p>子线程： 用于执行耗时操作，比如 I/O操作和网络请求等。（安卓3.0以后要求耗访问网络必须在子线程种执行）更新UI的工作必须交给主线程，子线程在安卓里是不允许更新UI的。</p>
</blockquote>
<p>简而言之，就是说：</p>
<ul>
<li>主线程不能执行耗时操作（避免ANR）</li>
<li>子线程不能直接更新UI界面</li>
</ul>
<h3 id="Handler-的简单使用"><a href="#Handler-的简单使用" class="headerlink" title="Handler 的简单使用"></a>Handler 的简单使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> implement this method.</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在新的线程中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Message msg = Message.obtain();</div><div class="line">msg.what = <span class="number">1</span>;</div><div class="line">mHandler.sendMessage(msg);</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/13/Android消息机制——Handler机制详解/simplehandlerexample.png" alt="简单的Handler使用" title="">
                </div>
                <div class="image-caption">简单的Handler使用</div>
            </figure>
<p>上述代码和图片介绍了handler最简单的一种使用方法和过程，下面我们按过程详细介绍handler机制。</p>
<h2 id="Handler-机制的分析理解"><a href="#Handler-机制的分析理解" class="headerlink" title="Handler 机制的分析理解"></a>Handler 机制的分析理解</h2><p>下面，我们按照消息从创建、发送到处理的过程，结合源代码理解Handler机制。</p>
<h3 id="Message简介"><a href="#Message简介" class="headerlink" title="Message简介"></a>Message简介</h3><p>第一步当然是创建一个消息。在创建新Message时，我们使用<code>Message.obtain()</code>方法来新建一条消息，而不是直接<code>new Message()</code>。我们不妨来看一下obtain方法的源代码</p>
<p>Message的源代码链接：<a href="http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/os/Message.java#Message" target="_blank" rel="external">android.os.Message源代码</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Return a new Message instance from the global pool. Allows us to </div><div class="line"> * avoid allocating new objects in many cases. </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;  </div><div class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;  </div><div class="line">            Message m = sPool;  </div><div class="line">            sPool = m.next;  </div><div class="line">            m.next = <span class="keyword">null</span>;  </div><div class="line">            sPoolSize--;  </div><div class="line">            <span class="keyword">return</span> m;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见从<code>obtain()</code>的源代码中我们可以知道,它是静态方法,而且只有在<code>spool == null</code>的情况下才会<code>new</code>出一个<code>Message()</code>,返回一个Message对象,如果在不为空的情况下,Message的对象都是从Message对象池里面拿的实例从而重复使用的,这也为了Android中的Message对象能够更好的回收。</p>
<p>说到回收，我们看看跟回收有关的方法。最后追溯到recycleUnchecked()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Recycles a Message that may be in-use.</div><div class="line"> * Used internally by the MessageQueue and Looper when disposing of queued Messages.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Mark the message as in use while it remains in the recycled object pool.</span></div><div class="line">    <span class="comment">// Clear out all other details.</span></div><div class="line">    flags = FLAG_IN_USE;</div><div class="line">    what = <span class="number">0</span>;</div><div class="line">    arg1 = <span class="number">0</span>;</div><div class="line">    arg2 = <span class="number">0</span>;</div><div class="line">    obj = <span class="keyword">null</span>;</div><div class="line">    replyTo = <span class="keyword">null</span>;</div><div class="line">    sendingUid = -<span class="number">1</span>;</div><div class="line">    when = <span class="number">0</span>;</div><div class="line">    target = <span class="keyword">null</span>;</div><div class="line">    callback = <span class="keyword">null</span>;</div><div class="line">    data = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</div><div class="line">        <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</div><div class="line">            next = sPool;</div><div class="line">            sPool = <span class="keyword">this</span>;</div><div class="line">            sPoolSize++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们继续深入Message类来看。首先看一下其中几个重要的成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> what;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg1; </div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg2;</div><div class="line"><span class="keyword">public</span> Object obj;</div><div class="line">Bundle data;</div><div class="line"></div><div class="line">Handler target;</div><div class="line">Runnable callback;</div><div class="line"></div><div class="line">Message next;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sPoolSync = <span class="keyword">new</span> Object();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;</div></pre></td></tr></table></figure></p>
<p>其中，前五个不再赘述。其中what用于识别(identify)消息。后面四个都是msg对象中携带的数据(data)。</p>
<p>target指的是发送这条消息的Handler，在发送消息时，这个msg对象会持有一个对Handler的引用。这个后面分析Handler源码时细说。<br>callback是实现了Runnable接口，当这个msg对象的callback不为null时，在分发Message时会回调这个callback，否则执行handleMessage()方法。这个后面分析时会再次细说。</p>
<p>sPool: 消息回收池，是个链表结构。</p>
<p>返回去再看看obtain和recycle方法，是不是清晰多了 : )</p>
<p>小结：</p>
<ul>
<li>使用message.obtain()方法新建message对象，message是重复使用的，有对象池进行回收。</li>
<li>每个message都对应一个发送该消息的Handler。（后面详解）</li>
<li>message在被处理时会先回调message对象持有的callback，在callback为null的时候才会调用handler的handleMessage方法。（后面详解）</li>
</ul>
<h3 id="MessageQueue-简介"><a href="#MessageQueue-简介" class="headerlink" title="MessageQueue 简介"></a>MessageQueue 简介</h3><p><a href="http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/os/MessageQueue.java" target="_blank" rel="external">MessageQueue源码</a></p>
<p>MessageQueue中文翻译就是消息队列，它内部存储了一组信息，存放的是Message，以队列的形式对外提供了插入和删除的工作（虽然名字叫做队列，但是其内部的 存储结构是单链表）</p>
<ul>
<li>插入（入队） enqueueMessage(Message msg, long when)</li>
<li>读取（出队） next()</li>
</ul>
<p>顾名思义。这一部分源代码分析先跳过，随后分析。</p>
<h3 id="Handler-简介"><a href="#Handler-简介" class="headerlink" title="Handler 简介"></a>Handler 简介</h3><p>在消息创建完毕后，我们需要使用Handler的sendMessage方法发送消息。</p>
<p>首先当然需要new一个Handler，我们来看看Handler的构造函数和注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Default constructor associates this handler with the &#123;<span class="doctag">@link</span> Looper&#125; for the</div><div class="line"> * current thread.</div><div class="line"> *</div><div class="line"> * If this thread does not have a looper, this handler won't be able to receive messages</div><div class="line"> * so an exception is thrown.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无参的构造函数最终追溯到如下两个构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the &#123;<span class="doctag">@link</span> Looper&#125; for the current thread with the specified callback interface</div><div class="line"> * and set whether the handler should be asynchronous.</div><div class="line"> *</div><div class="line"> * Handlers are synchronous by default unless this constructor is used to make</div><div class="line"> * one that is strictly asynchronous.</div><div class="line"> *</div><div class="line"> * Asynchronous messages represent interrupts or events that do not require global ordering</div><div class="line"> * with respect to synchronous messages.  Asynchronous messages are not subject to</div><div class="line"> * the synchronization barriers introduced by &#123;<span class="doctag">@link</span> MessageQueue#enqueueSyncBarrier(long)&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line"> * <span class="doctag">@param</span> async If true, the handler calls &#123;<span class="doctag">@link</span> Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;<span class="doctag">@link</span> Message&#125; that is sent to it or &#123;<span class="doctag">@link</span> Runnable&#125; that is posted to it.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the provided &#123;<span class="doctag">@link</span> Looper&#125; instead of the default one and take a callback</div><div class="line"> * interface in which to handle messages.  Also set whether the handler</div><div class="line"> * should be asynchronous.</div><div class="line"> *</div><div class="line"> * Handlers are synchronous by default unless this constructor is used to make</div><div class="line"> * one that is strictly asynchronous.</div><div class="line"> *</div><div class="line"> * Asynchronous messages represent interrupts or events that do not require global ordering</div><div class="line"> * with respect to synchronous messages.  Asynchronous messages are not subject to</div><div class="line"> * the synchronization barriers introduced by &#123;<span class="doctag">@link</span> MessageQueue#enqueueSyncBarrier(long)&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> looper The looper, must not be null.</div><div class="line"> * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line"> * <span class="doctag">@param</span> async If true, the handler calls &#123;<span class="doctag">@link</span> Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;<span class="doctag">@link</span> Message&#125; that is sent to it or &#123;<span class="doctag">@link</span> Runnable&#125; that is posted to it.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    mLooper = looper;</div><div class="line">    mQueue = looper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可见，在新建一个Handler时有两种情况。</p>
<ol>
<li>如果没有指定looper，则构造函数会调用<code>Looper.myLooper()</code>方法来获得当前线程（i.e. 创建当前Handler的线程）的looper，并持有其引用。如果当前线程还没有初始化looper则会抛RuntimeException。</li>
<li>如果指定了looper，那么Handler就持有你指定looper的引用。</li>
</ol>
<p>总而言之，每个Handler都对应有一个Looper。关于Looper的内容下面开始。</p>
<h3 id="Looper-简介"><a href="#Looper-简介" class="headerlink" title="Looper 简介"></a>Looper 简介</h3><p><a href="http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/os/Looper.java#Looper" target="_blank" rel="external">Looper源代码</a></p>
<p>我们先截取部分成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></div><div class="line"></div><div class="line"><span class="keyword">final</span> MessageQueue mQueue;</div><div class="line"><span class="keyword">final</span> Thread mThread;</div></pre></td></tr></table></figure>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html" target="_blank" rel="external">ThreadLocal是什么</a></p>
<blockquote>
<p>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).</p>
</blockquote>
<p>下面是looper的prepare方法和其构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="comment">/** Initialize the current thread as a looper.</span></div><div class="line">   * This gives you a chance to create handlers that then reference</div><div class="line">   * this looper, before actually starting the loop. Be sure to call</div><div class="line">   * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class="line">   * &#123;<span class="doctag">@link</span> #quit()&#125;.</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">     prepare(<span class="keyword">true</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">     &#125;</div><div class="line">     sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line"> &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">  * Initialize the current thread as a looper, marking it as an</div><div class="line">  * application's main looper. The main looper for your application</div><div class="line">  * is created by the Android environment, so you should never need</div><div class="line">  * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">     prepare(<span class="keyword">false</span>);</div><div class="line">     <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">         <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">         &#125;</div><div class="line">         sMainLooper = myLooper();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return the Looper object associated with the current thread.  Returns</div><div class="line"> * null if the calling thread is not associated with a Looper.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">    mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，根据ThreadLocal的机理，每个线程都对应一个looper。</p>
<p>我们通过prepare方法创建当前线程对应的looper，也就是调用了私有的构造方法。我们注意到，当looper创建的时候会随之创建一个MessageQueue，一个Looper对应一个MessageQueue。</p>
<p>主线程是个例外，其looper为专门的一个成员变量 sMainLooper。主线程的Looper在Main函数中自动被创建了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> </span>&#123;</div><div class="line"></div><div class="line">    (前面代码省略..............)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SamplingProfilerIntegration.start();  </div><div class="line">  </div><div class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We  </span></div><div class="line">        <span class="comment">// disable it here, but selectively enable it later (via  </span></div><div class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.  </span></div><div class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);  </div><div class="line">  </div><div class="line">        Environment.initForCurrentUser();  </div><div class="line">  </div><div class="line">        <span class="comment">// Set the reporter for event logging in libcore  </span></div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());  </div><div class="line">  </div><div class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);  </div><div class="line">  </div><div class="line">        Looper.prepareMainLooper();  </div><div class="line">  </div><div class="line">        <span class="comment">// 创建ActivityThread实例  </span></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();  </div><div class="line">        thread.attach(<span class="keyword">false</span>);  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;  </div><div class="line">            sMainThreadHandler = thread.getHandler();  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        AsyncTask.init();  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;  </div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span>  </div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        Looper.loop();  </div><div class="line">  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结合上面分析的Looper可以得到如下结论：</p>
<ul>
<li>每个线程能且只能创建一个对应的looper，主线程的looper比较特殊。</li>
<li>在looper创建时会对应生成当前线程的MessageQueue。</li>
</ul>
<p>也就是说，线程、looper和MessageQueue某种程度上是一一对应的关系。简单来说，我们在一条线程中执行<code>Looper.prepare()</code>方法时，创建了属于这条线程的Looper和MessageQueue.</p>
<ul>
<li>一般情况我们使用无参的构造函数，实际上是把Handler和当前线程的Looper和MessageQueue“绑定”。也就是说在当前线程处理消息。</li>
<li>主线程是个例外，任何一个线程中的Handler都可以绑定主线程的Looper，也就是说，无论哪个线程的Handler都可以往主线程发消息。</li>
</ul>
<p>因为Handler、Looper和Message的三角关系被我强行拆成三个部分很难理解清楚。我先把上述的结论下了。我们再回到Handler的<code>sendMessage()</code>方法，看看一条消息是怎么被发送的。</p>
<h3 id="回到Handler和Looper"><a href="#回到Handler和Looper" class="headerlink" title="回到Handler和Looper"></a>回到Handler和Looper</h3><p>sendMessage有一篮子方法，我们发现，关于send和post的方法里面，调来调去就是几个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r), uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtTime</span><span class="params">(Runnable r, Object token, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r, token), uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postAtFrontOfQueue</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendMessageAtFrontOfQueue(getPostMessage(r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">            delayMillis = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>殊途同归，最后10 个方法都进入了enqueueMessage方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之前说过，每个message持有一个handler的引用，这个handler就是发送消息的handler，最后也会发回这个handler去处理消息。而发送消息的过程，就是在当前线程的MessageQueue里面enqueue一条消息。</p>
<p>那么，当消息被enqueue到队列之后，Looper是怎么样轮询消息的呢？</p>
<p>Looper有个重要的方法是loop，之前只是简单介绍了looper，但并没有把方法贴出来。现在我们来看看<code>Looper.loop()</code>这一方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Run the message queue in this thread. Be sure to call</div><div class="line"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之前说过，每个message持有一个发送这个消息的handler的引用(target)。</p>
<p>在处理消息时，直接调用了<code>msg.target.dispatchMessage()</code>方法，把消息送回Handler进行处理。</p>
<p>结合之前的内容，再总结一下：</p>
<ul>
<li><p>Handler发送消息仅仅是调用MessageQueue的enqueueMessage向插入一条信息到MessageQueue</p>
</li>
<li><p>Looper不断轮询调用MessageQueue的next方法获得下一条待处理的消息</p>
</li>
<li><p>如果发现message就调用handler的dispatchMessage，ldispatchMessage被成功调用，接着调用handlerMessage()</p>
</li>
</ul>
<p>发送消息的过程已经非常明确了。下面我们来看处理消息的过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Subclasses must implement this to receive messages.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle system messages here.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>message对象中有一个callback成员变量，如果这个message有callback那么就按照callback的内容去处理。否则就调用正常的handleMessage方法。</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>除了发送消息之外，我们还有以下几种方法可以在子线程中进行UI操作：</p>
<ol>
<li>Handler的post()方法</li>
<li>View的post()方法</li>
<li>Activity的runOnUiThread()方法</li>
</ol>
<p>post方法和sendMessage方法使用类似，只是post的参数是一个Runnable。我们来看看源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span>  </span></div><div class="line">&#123;  </div><div class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，是通过getPostMessage把runnable包装成了一个Message。然后再去发一条message。我们看看这个包装消息的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;  </div><div class="line">    Message m = Message.obtain();  </div><div class="line">    m.callback = r;  </div><div class="line">    <span class="keyword">return</span> m;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法中将消息的callback字段的值指定为传入的Runnable对象。咦？这个callback字段看起来有些眼熟啊，喔！在Handler的dispatchMessage()方法中原来有做一个检查，如果Message的callback等于null才会去调用handleMessage()方法，否则就调用handleCallback()方法。</p>
<p>那我们快来看下handleCallback()方法中的代码吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;  </div><div class="line">    message.callback.run();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>竟然就是直接调用了一开始传入的Runnable对象的run()方法。</p>
<p>然后再来看一下View中的post()方法，post方法也是传入一个runnable。源码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;  </div><div class="line">    Handler handler;  </div><div class="line">    <span class="keyword">if</span> (mAttachInfo != <span class="keyword">null</span>) &#123;  </div><div class="line">        handler = mAttachInfo.mHandler;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        ViewRoot.getRunQueue().post(action);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> handler.post(action);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原来就是调用了Handler中的post()方法，我相信已经没有什么必要再做解释了。</p>
<p>最后再来看一下Activity中的runOnUiThread()方法，代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runOnUiThread</span><span class="params">(Runnable action)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;  </div><div class="line">        mHandler.post(action);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        action.run();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果当前的线程不等于UI线程(主线程)，就去调用Handler的post()方法，否则就直接调用Runnable对象的run()方法。还有什么会比这更清晰明了的吗？</p>
<p>通过以上所有源码的分析，我们已经发现了，不管是使用哪种方法在子线程中更新UI，其实背后的原理都是相同的，必须都要借助Handler机制来实现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Handler机制简单概括如下：</p>
<ol>
<li>每个线程可以初始化一个looper和MessageQueue，主线程在ActivityThread运行时已经有了。</li>
<li>Handler负责发送消息对象，发送时会把消息对象里面的target指向自己，表明“消息是我发的”。</li>
<li>Handler发送消息的过程就是往MessageQueue里面入队的过程。入的是哪个队取决于你的Handler，如果new的时候构造函数为空，那就是当前线程的MessageQueue。之前说了主线程的looper可以在任何地方获得（单独的成员变量），所以任何线程的Handler都可以往主线程的MessageQueue中发消息。</li>
<li>Looper负责轮询消息，每拿到一个消息会根据它的target丢给发消息的那个Handler，调用其dispatchMessage方法去处理。</li>
</ol>
<p>下图盗网上的，自己画不好。顺便求一波Windows和Linux上画这种流程图的工具。</p>
<p>先写那么多，有问题以后再改……</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/03/13/Android消息机制——Handler机制详解/handler_process.png" alt="Handler机制过程图" title="">
                </div>
                <div class="image-caption">Handler机制过程图</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Handler-机制详解&quot;&gt;&lt;a href=&quot;#Android-Handler-机制详解&quot; class=&quot;headerlink&quot; title=&quot;Android Handler 机制详解&quot;&gt;&lt;/a&gt;Android Handler 机制详解&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="Android" scheme="http://llag9810.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
